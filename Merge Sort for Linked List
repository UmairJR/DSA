class Solution
{
    static Node findMid(Node head)
    {
        Node slow = head;
        Node fast = head.next;
        while(fast == null && fast.next == null)
        {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    static Node merge(Node left, Node right)
    {
        if(left == null)
        {
            return right;
        }
        if(right == null)
        {
            return left;
        }
        Node res = new Node(-1);
        Node temp = res;
        while(left != null && right != null)
        {
            if(left.data < right.data)
            {
               temp.next = left;
               temp = left;
               left = left.next;
            }
            else{
                temp.next = right;
                temp = right;
                right = right.next;
            }
        }
        while(left != null)
        {
            temp.next = left;
            temp = left;
            left = left.next;
        }
        while(right != null)
        {
            temp.next = right;
            temp = right;
            right = right.next;
        }
        res = res.next;
        return res;
    }
    
    static Node mergeSort(Node head)
    {
        if( head == null || head.next == null)
        {
            return head;
        }
        //break list in two halves
        Node left = head;
        Node mid = findMid(head);
        Node right = mid.next;
        mid.next = null;
        
        //recursively sort
        left = mergeSort(left);
        right = mergeSort(right);
        
        //merge two list
        Node res = merge(left, right);
        
        return res;
    }
}
