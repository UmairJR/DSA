//Recursion


//Memoized - RC + Matrix
class Solution
{
    static int lcs(int x, int y, String s1, String s2)
    {
        int[][] memo = new int[x+1][y+1];
        for(int[] row : memo){
            Arrays.fill(row, -1);
        }
        return ulcs(x, y, s1, s2, memo);
    }
    static int ulcs(int x, int y, String s1, String s2, int[][] memo)
    {
        if(x == 0 || y == 0){
            return 0;
        }
        if(memo[x][y] != -1){
            return memo[x][y];
        }
        if(s1.charAt(x-1) == s2.charAt(y-1)){
            return memo[x][y] = 1 + ulcs(x-1,y-1, s1, s2, memo);
        }
        else{
            return memo[x][y] = Math.max(ulcs(x-1, y, s1, s2, memo), ulcs(x, y-1, s1, s2, memo));
        }
    }
}

//Bottom-Up - Tabulation
class Solution
{
    //Function to find the length of longest common subsequence in two strings.
    static int lcs(int x, int y, String s1, String s2)
    {
        int[][] dp = new int[x+1][y+1];
        
        //Initialization according to base condition
        for(int i = 0; i < x+1; i++) dp[i][0] = 0;
        for(int j = 0; j < y+1; j++) dp[0][j] = 0;
        
        for(int i = 1; i < x+1;i++){
            for(int j = 1; j< y+1; j++){
                if(s1.charAt(i-1) == s2.charAt(j-1)){
                    dp[i][j] = 1 + dp[i-1][j-1];
                }       
                else{
                    dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                }
            }
        }
        
        return dp[x][y];
    }
    
}
