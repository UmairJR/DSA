class Solution {
    public int maxArea(int[] height) {
        int n  = height.length;
        int l = 0, h = n-1;
        int max = 0;

        while(l<h)
        {
            int l_h = height[l];
            int h_h = height[h];
            int min_h = Math.min(l_h,h_h);
            int len = h - l;
            int curr_area = min_h * len;

            max = Math.max(curr_area,max);

            if(l_h < h_h)
            {
                l++;
            }
            else{
                h--;
            }
        }
        return max;

    }
}

//2025
class Solution {
    public int maxArea(int[] height) {
        int n = height.length;
        int i = 0; 
        int j = n - 1;
        int max = 0;
        while(i < j){
            int hLeft = height[i];
            int hRight = height[j];
            int minHeight = Math.min(hLeft, hRight);
            int currLength = j - i;
            int currMax = minHeight * currLength;
            max = Math.max(max, currMax);
            if(hLeft < hRight){
                i++;
            }
            else {
                j--;
            }
        }
        return max;
    }
}
