//BST.java

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

public class BST {
    int[] nodes;
    BST(int[] nodes){
        this.nodes = nodes;
    }


    Node buildtree(Node root, int val){
        if(root == null){
            root = new Node(val);
            return root;
        }
        if(val < root.data){
            root.left = buildtree(root.left, val);
        }
        else{
            root.right = buildtree(root.right, val);
        }
        return root;
    }
    void preorder(Node root){
        if(root == null){
            return;
        }
        System.out.print(root.data + " ");
        preorder(root.left);
        preorder(root.right);

    }
    void inorder(Node root){
        if(root == null){
            return;
        }
        inorder(root.left);
        System.out.print(root.data + " ");
        inorder(root.right);

    }
    void bfs(Node root){
        Queue<Node> q = new LinkedList<>();
        q.add(root);
        q.add(null);
        while(!q.isEmpty()){
            Node currNode = q.poll();
            if(currNode == null){
                System.out.println();
                if(q.isEmpty()){
                    break;
                }
                else{
                    q.add(null);
                }
            }
            else{
                System.out.print(currNode.data + " ");
                if(currNode.left != null) {
                    q.add(currNode.left);
                }
                if(currNode.right != null) {
                    q.add(currNode.right);
                }
            }
        }
    }
    boolean search(Node root, int key){
        if(root == null){
            return false;
        }
        if(key < root.data){
            return search(root.left, key);
        }
        else if(root.data == key){
            return true;
        }
        else{
            return search(root.right, key);
        }
    }
    Node delete(Node root, int val){
        if (root == null) {
            return root;
        }
        if(val < root.data){
            root.left = delete(root.left, val);
        }
        else if(val > root.data){
            root.right = delete(root.right, val);
        }
        else {// (val == root.data)
            //case 1
            if (root.left == null && root.right == null) {
                return null;
            }
            //case 2
            if (root.left == null) {
                return root.right;
            }
            else if(root.right == null) {
                return root.left;
            }
            //case 3
            Node ls = leftSuccessor(root.right);
            root.data = ls.data;
            root.right = delete(root.right, ls.data);
        }
        return root;
    }
    Node leftSuccessor(Node root){
        while(root.left != null){
            root = root.left;
        }
        return root;
    }

    Node printRange(Node root, int x, int y){
        if(root == null){
            return null;
        }
        if(x <= root.data && root.data <= y){
            printRange(root.left, x, y);
            printRange(root.right, x, y);
            System.out.print(root.data + " ");
        }
        else if(root.data >= y){
            printRange(root.left, x, y);
        }
        else{
            printRange(root.right, x, y);
        }
        return root;
    }
    void printPaths(ArrayList<Integer> paths){
        for(int i=0; i<paths.size(); i++){
            System.out.print(paths.get(i) + "->");
        }
        System.out.println();
    }
    Node root2Leaf(Node root, ArrayList<Integer> paths){
        if(root == null){
            return null;
        }
        paths.add(root.data);
        if(root.left == null && root.right == null){
            printPaths(paths);
        }
        else{
            root2Leaf(root.left, paths);
            root2Leaf(root.right, paths);
        }
        paths.remove(paths.size() - 1);

        return root;
    }
}

//main.java

import java.util.ArrayList;

public class Main {
    public static void main(String[] args) {
        //BST
        int[] arr = {5,1,3,4, 2, 7, 9};
        BST bst = new BST(arr);
        Node root1 = null;
        for(int i = 0; i < arr.length; i++){
            root1 = bst.buildtree(root1, arr[i]);
        }
        System.out.println("In - order Traversal:");
        bst.inorder(root1);
        System.out.println();
        System.out.println("BFS Traversal:");
        bst.bfs(root1);
        System.out.println();
        int key = 0;
        System.out.println("Searching Key : " + key);
        System.out.print(bst.search(root1, key) ? "Found" : "Not Found");
        System.out.println();
        int x = 2, y = 5;
        System.out.println("Range is from " + x + " to " + y);
        bst.printRange(root1, x, y);

        System.out.println();

        System.out.println("All Paths : ");
        bst.root2Leaf(root1, new ArrayList<>());

        System.out.println();
        int val = 7;
        System.out.println("Delete Value : " + val);
        bst.delete(root1, val);
        bst.inorder(root1);
    }
}
