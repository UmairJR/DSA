class Solution
{
    void traverseLeft(Node node, ArrayList<Integer> res){
        if(node == null || (node.left == null && node.right == null)){
            return;
        }
        res.add(node.data);
        if(node.left != null){
            traverseLeft(node.left, res);
        }
        else{
            traverseLeft(node.right, res);
        }
    }
    void traverseLeaf(Node node, ArrayList<Integer> res){
        if(node == null){
            return;
        }
        if(node.left == null && node.right == null){
            res.add(node.data);
            return;
        }
        traverseLeaf(node.left, res);
        traverseLeaf(node.right, res);
    }
    void traverseRight(Node node, ArrayList<Integer> res){
        if(node == null || (node.left == null && node.right == null)){
            return;
        }
        
        if(node.right != null){
            traverseRight(node.right, res);
        }
        else{
            traverseRight(node.left, res);
        }
        res.add(node.data);
    }
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> res = new ArrayList<>();
	    if(node == null){
	        return res;
	    }
	    if(node.left == null && node.right == null){
	        res.add(node.data);
            return res;
        }
	    res.add(node.data);
	    traverseLeft(node.left, res);
	    traverseLeaf(node.left, res);
	    traverseLeaf(node.right, res);
	    traverseRight(node.right, res);
	    return res;
	}
}
