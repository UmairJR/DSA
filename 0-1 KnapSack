//My first DP problem

//Recursion
class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        if(n==0 || W == 0){
            return 0;
        }
        if(wt[n-1] <= W){
            return Math.max(val[n-1]+knapSack(W-wt[n-1],wt, val, n-1), knapSack(W, wt, val, n-1));
        }
        else if(wt[n-1] > W){
            return knapSack(W, wt, val, n-1);
        }
        return 0;
    } 
}

//Memoization - RC + Matrix
class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int[][] dp = new int[n+1][W+1];
        for(int[] row : dp){
            Arrays.fill(row, -1);
        }
        return uknapSack(W, wt, val, n, dp);
    }
    
    static int uknapSack(int W, int wt[], int val[], int n, int[][] dp) 
    { 
        if(n==0 || W == 0){
            return 0;
        }
        if(dp[n][W] != -1){
            return dp[n][W];
        }
        if(wt[n-1] <= W){
            return dp[n][W] = Math.max(val[n-1]+uknapSack(W-wt[n-1],wt, val, n-1,dp), uknapSack(W, wt, val, n-1,dp));
        }
        else if(wt[n-1] > W){
            return dp[n][W] = uknapSack(W, wt, val, n-1,dp);
        }
        return 0;
    } 
}

//Tabular - Bottom-up Approach - Iterative(without Recursion only with Matrix)
class Solution 
{ 
    static int knapSack(int W, int wt[], int val[], int n) 
    { 
        int[][] dp = new int[n+1][W+1];
        for(int i = 0; i < n+1; i++) dp[i][0] = 0;
        for(int j = 0; j < W+1; j++) dp[0][j] = 0;
        
        //i -> n
        //j -> W
        for(int i = 1; i < n+1; i++){
            for(int j = 1; j < W+1; j++){
                if(wt[i-1] <= j){
                    dp[i][j] = Math.max(val[i-1]+dp[i-1][j-wt[i-1]], 0+dp[i-1][j]);
                }
                else if(wt[i-1] > j){
                    dp[i][j] = 0+dp[i-1][j];
                }
            }
        }
        
        return dp[n][W];
    } 
}
