class Solution
{
	ArrayList <Integer> boundary(Node node)
	{
	    ArrayList<Integer> res = new ArrayList<>();
	    res.add(node.data);
	    if(node == null){
	        return res;
	    }
	    if(isLeaf(node)){
	        return res;
	    }
	    addLeft(node.left, res);
	    addLeaf(node, res);
	    addRight(node.right, res);
	    
	    return res;
	    
	}
	
	boolean isLeaf(Node node)
	{
	    return node.right == null && node.left == null;
	}
	
	void addLeaf(Node node, ArrayList<Integer> res)
	{
	    if(isLeaf(node)){
	          res.add(node.data);
	          return;
	    }
	    if(node.left != null){
	        addLeaf(node.left, res);
	    }
	    if(node.right != null){
	        addLeaf(node.right, res);
	    }
	}
	
	void addLeft(Node node, ArrayList<Integer> res)
	{
	    Node curr = node;
	    while(curr != null){
	        if(!isLeaf(curr)){
	            res.add(curr.data);
	        }
	        if(curr.left != null){
	            curr = curr.left;
	        }
	        else{
	            curr = curr.right;
	        }
	    }
	}
	
	void addRight(Node node, ArrayList<Integer> res)
	{
	    ArrayList<Integer> temp = new ArrayList<>();
	    Node curr = node;
	    while(curr != null){
	        if(!isLeaf(curr)){
	            temp.add(curr.data);
	        }
	        if(curr.right != null){
	            curr = curr.right;
	        }
	        else{
	            curr = curr.left;
	        }
	    }
	    Collections.reverse(temp);
	    for(int val : temp){
	        res.add(val);
	    }
	    
	}
