class Solution
{

	public int minDifference(int nums[], int n) 
	{ 
        if(n==2){
            return Math.abs(nums[0] - nums[1]);
        }
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
        }
        
        boolean[][] dp = new boolean[n+1][sum+1];
        for(int i = 0; i < n+1; i++) dp[i][0] = true;
        for(int j = 1; j < sum+1; j++) dp[0][j] = false;
        
        for(int i = 1; i < n+1; i++){
            for(int j = 1; j< sum+1; j++){
                if(nums[i-1] <= j){
                    dp[i][j] = dp[i-1][j-nums[i-1]] || dp[i-1][j];
                }
                else if(nums[i-1] > j){
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        int min = Integer.MAX_VALUE;
        for(int j = 0; j <= sum/2;j++){
            if(dp[n][j]){
                min = Math.min(min, sum - (2*j));
            }
        }
       
        return min;
	} 
}
