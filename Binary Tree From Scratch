import java.util.*;

class BinaryTreePractice{
    
    static class Node{
      int data;
      Node left;
      Node right;
      
      Node(int data){
        this.data = data;
        this.left = null;
        this.right = null;
      }
    }
    
    static class BinaryTree{
      static int index = -1;
      public static Node buildTree(int nodes[])
      {
        index++;
        if(nodes[index] == -1) return null;
        
        Node newNode = new Node(nodes[index]);
        newNode.left = buildTree(nodes);
        newNode.right = buildTree(nodes);
        
        return newNode;

      }
    }
    
    public static void preOrder(Node root)
    {
      
      if(root == null)
      {
        // System.out.print(-1+" ");
        return;
      }
      System.out.print(root.data + " ");
      preOrder(root.left);
      preOrder(root.right);
      
    }
    
    public static void inOrder(Node root)
    {
      if(root == null)
      {
        // System.out.print(-1+" ");
        return;
      }
      inOrder(root.left);
      System.out.print(root.data + " ");
      
      inOrder(root.right);
    }
    
    public static void postOrder(Node root)
    {
      if(root == null)
      {
        // System.out.print(-1+" ");
        return;
      }
      postOrder(root.left);
      postOrder(root.right);
      System.out.print(root.data + " ");
      
      
    }
    public static void levelOrder(Node root)
    {
      if(root == null)
      {
        return;
      }
      Queue<Node> q = new LinkedList<>();
      q.add(root);
      q.add(null);
      while(!q.isEmpty())
      {
        Node curr = q.remove();
        if(curr == null)
        {
          System.out.println();
          if(q.isEmpty())
          {
            break;
          }
          else{
            q.add(null);
          }
        }
        else{
          System.out.print(curr.data + " ");
          if(curr.left != null)
          {
            q.add(curr.left);
          }
          if(curr.right != null)
          {
            q.add(curr.right);
          }
        }
      }
      
    }
    
    public static int count(Node root)
    {
      if(root == null)
      {
        return 0;
      }
      int leftNodes = count(root.left);
      int rightNodes = count(root.right);
      
      return leftNodes + rightNodes + 1;
    }
    
    public static int sum(Node root)
    {
      if(root == null)
      {
        return 0;
      }
      int leftNodes = sum(root.left);
      int rightNodes = sum(root.right);
      
      return leftNodes + rightNodes + root.data;
    }
    
    public static int height(Node root)
    {
      if(root == null)
      {
        return 0;
      }
      int leftNodes = height(root.left);
      int rightNodes = height(root.right);
      int myHeight = Math.max(leftNodes, rightNodes) + 1;
      return myHeight;
    }
    
    static class TreeInfo{
      int ht;
      int dm;
      TreeInfo(int ht, int dm)
      {
        this.ht = ht;
        this.dm = dm;
      }
    }
    
    public static TreeInfo diameter(Node root)
    {
      if(root == null)
      {
        return new TreeInfo(0,0);
      }
      TreeInfo leftNodes = diameter(root.left);
      TreeInfo rightNodes = diameter(root.right);
      
      
      int myHeight = Math.max(leftNodes.ht, rightNodes.ht) + 1;
      
      int dm1 = leftNodes.dm;
      int dm2 = rightNodes.dm;
      int dm3 = leftNodes.ht + rightNodes.ht + 1;
      int myDiameter = Math.max(Math.max(dm1, dm2), dm3);
      
      TreeInfo myInfo = new TreeInfo(myHeight, myDiameter);
      return myInfo;
    }
    
    public static void main(String[] args) {
      int nodes[] = {1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
      BinaryTree tree = new BinaryTree();
      Node root = tree.buildTree(nodes);
      System.out.println(root.data);
      System.out.println("Pre-Order:");
      preOrder(root);
      System.out.println();
      System.out.println("In-Order:");
      inOrder(root);
      System.out.println();
      System.out.println("Post-Order:");
      postOrder(root);
      System.out.println();
      System.out.println("Level-Order:");
      levelOrder(root);
      System.out.println("Count of Nodes: " + count(root));
      System.out.println("Sum of Nodes: " + sum(root));
      System.out.println("Height of Tree: " + height(root));
      System.out.println("Diameter of Tree: " + diameter(root).dm);

}
}
